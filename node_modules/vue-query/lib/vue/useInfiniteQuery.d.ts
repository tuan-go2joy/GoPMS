import type { QueryFunction, QueryKey, InfiniteQueryObserverResult } from "react-query/types/core";
import { UseQueryReturnType } from "./useBaseQuery";
import type { WithQueryClientKey, VueInfiniteQueryObserverOptions } from "./types";
export declare type UseInfiniteQueryOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = WithQueryClientKey<VueInfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>>;
declare type UseInfiniteQueryReturnType<TData, TError> = UseQueryReturnType<TData, TError, InfiniteQueryObserverResult<TData, TError>>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseInfiniteQueryReturnType<TData, TError>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: QueryKey, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>, "queryKey">): UseInfiniteQueryReturnType<TData, TError>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: QueryKey, queryFn: QueryFunction<TQueryFnData, TQueryKey>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>, "queryKey" | "queryFn">): UseInfiniteQueryReturnType<TData, TError>;
export {};
