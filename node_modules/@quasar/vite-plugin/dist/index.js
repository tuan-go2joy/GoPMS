'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var package_json = require('quasar/package.json');
var vite = require('vite');
var importTransformation = require('quasar/dist/transforms/import-transformation.js');
var autoImportData = require('quasar/dist/transforms/auto-import.json');
var loaderAssetUrls_json = require('quasar/dist/transforms/loader-asset-urls.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var importTransformation__default = /*#__PURE__*/_interopDefaultLegacy(importTransformation);
var autoImportData__default = /*#__PURE__*/_interopDefaultLegacy(autoImportData);
var loaderAssetUrls_json__default = /*#__PURE__*/_interopDefaultLegacy(loaderAssetUrls_json);

var getConfig = ({ runMode, sassVariables }) => {
  const viteCfg = {
    define: {
      __QUASAR_VERSION__: `'${ package_json.version }'`,
      __QUASAR_SSR__: false,
      __QUASAR_SSR_SERVER__: false,
      __QUASAR_SSR_CLIENT__: false,
      __QUASAR_SSR_PWA__: false
    },

    optimizeDeps: {
      exclude: [ 'quasar' ]
    }
  };

  if (runMode === 'ssr-client') {
    Object.assign(viteCfg.define, {
      __QUASAR_SSR__: true,
      __QUASAR_SSR_CLIENT__: true
    });
  }
  else if (runMode === 'ssr-server') {
    Object.assign(viteCfg.define, {
      __QUASAR_SSR__: true,
      __QUASAR_SSR_SERVER__: true
    });
  }

  if (sassVariables) {
    const sassImportCode = [ `@import 'quasar/src/css/variables.sass'`, '' ];

    if (typeof sassVariables === 'string') {
      sassImportCode.unshift(`@import '${ vite.normalizePath(sassVariables) }'`);
    }

    viteCfg.css = {
      preprocessorOptions: {
        sass: { additionalData: sassImportCode.join('\n') },
        scss: { additionalData: sassImportCode.join(';\n') }
      }
    };
  }

  return viteCfg
};

const importQuasarRegex = /import\s*\{([\w,\s]+)\}\s*from\s*['"]{1}quasar['"]{1};?/;
const jsTransformRegex = /\.[j|t]s$/;

function jsTransform (code) {
  return code.replace(
    importQuasarRegex,
    (_, match) => match.split(',')
      .map(identifier => {
        const id = identifier.trim();

        // might be an empty entry like below
        // (notice useQuasar is followed by a comma)
        // import { QTable, useQuasar, } from 'quasar'
        if (id === '') {
          return ''
        }

        const data = id.split(' as ');
        const importName = data[0].trim();
        const importAs = data[1] !== void 0
          ? data[1].trim()
          : importName;

        return `import ${importAs} from '${importTransformation__default["default"](importName)}';`
      })
      .join('')
  )
}

const vueTransformRegex = /\.vue(\?vue&type=template&lang.js)?$/;

const compRegex = {
  'kebab': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.kebabComponents}"\\)`, 'g'),
  'pascal': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.pascalComponents}"\\)`, 'g'),
  'combined': new RegExp(`_resolveComponent\\("${autoImportData__default["default"].regex.components}"\\)`, 'g')
};

const dirRegex = new RegExp(`_resolveDirective\\("${autoImportData__default["default"].regex.directives.replace(/v-/g, '')}"\\)`, 'g');
const lengthSortFn = (a, b) => b.length - a.length;

function vueTransform (content, autoImportComponentCase) {
  const importList = [];
  const importMap = {};

  const compList = [];
  const dirList = [];

  const reverseMap = {};

  let code = content
    .replace(
      importQuasarRegex,
      (_, match) => match.split(',')
        .map(identifier => {
          const data = identifier.split(' as ');
          const importName = data[0].trim();
          const importAs = data[1] !== void 0
            ? data[1].trim()
            : importName;

          importMap[importName] = importAs;
          return `import ${importAs} from '${importTransformation__default["default"](importName)}';`
        })
        .join('')
    )
    .replace(compRegex[autoImportComponentCase], (_, match) => {
      const name = autoImportData__default["default"].importName[match];
      const reverseName = match.replace(/-/g, '_');

      if (importMap[name] === void 0) {
        importList.push( name );
        reverseMap[reverseName] = name;
      }
      else {
        reverseMap[reverseName] = importMap[name];
      }

      compList.push(reverseName);
      return ''
    })
    .replace(dirRegex, (_, match) => {
      const name = autoImportData__default["default"].importName['v-' + match];
      const reverseName = match.replace(/-/g, '_');

      if (importMap[name] === void 0) {
        importList.push( name );
        reverseMap[reverseName] = name;
      }
      else {
        reverseMap[reverseName] = importMap[name];
      }

      dirList.push(reverseName);
      return ''
    });

  if (importList.length === 0) {
    return code
  }

  if (compList.length > 0) {
    const list = compList.sort(lengthSortFn).join('|');
    code = code
      .replace(new RegExp(`const _component_(${list}) = `, 'g'), '')
      .replace(new RegExp(`_component_(${list})`, 'g'), (_, match) => reverseMap[match]);
  }

  if (dirList.length > 0) {
    const list = dirList.sort(lengthSortFn).join('|');
    code = code
      .replace(new RegExp(`const _directive_(${list}) = `, 'g'), '')
      .replace(new RegExp(`_directive_(${list})`, 'g'), (_, match) => reverseMap[match]);
  }

  const codePrefix = importList
    .map(name => `import ${name} from '${importTransformation__default["default"](name)}'`)
    .join(`;`);

  return codePrefix + ';' + code
}

const defaultOptions = {
  runMode: 'web-client',
  autoImportComponentCase: 'kebab',
  sassVariables: true
};

function plugin (userOpts = {}) {
  const opts = {
    ...defaultOptions,
    ...userOpts
  };

  return {
    name: 'vite:quasar',

    config (cfg) {
      const vueCfg = cfg.plugins.find(entry => entry.name === 'vite:vue');

      if (vueCfg === void 0) {
        console.warn('In your Vite config file, please add the Quasar plugin after the Vue one');
        process.exit(1);
      }

      return getConfig(opts)
    },

    transform (src, id) {
      if (vueTransformRegex.test(id) === true) {
        return {
          code: vueTransform(src, opts.autoImportComponentCase),
          map: null // provide source map if available
        }
      }
      else if (jsTransformRegex.test(id) === true) {
        return {
          code: jsTransform(src),
          map: null // provide source map if available
        }
      }
    }
  }
}

Object.defineProperty(exports, 'transformAssetUrls', {
  enumerable: true,
  get: function () { return loaderAssetUrls_json__default["default"]; }
});
exports.quasar = plugin;
